---
binary_sensor:
  - name: "[Weather] Is Raining"
    unique_id: weather_is_raining
    icon: mdi:weather-pouring
    delay_on: 20
    delay_off: 120
    state: >
      {%- if has_value('sensor.tempest_st_00056115_rain_rate') %}
        {{ iif(states('sensor.tempest_st_00056115_rain_rate') | int > 0, "True", "False")}}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and has_value('binary_sensor.weatherflow_cloud_is_raining') %}
        {{ states('binary_sensor.weatherflow_cloud_is_raining') }}
      {%- endif %}
    availability: "{{ has_value('sensor.tempest_st_00056115_rain_rate') }}"
    attributes:
      category: weather
      provider: >
        {%- if has_value('sensor.tempest_st_00056115_rain_rate') %}
          Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and has_value('binary_sensor.weatherflow_cloud_is_raining') %}
          Weatherflow (Cloud)
        {%- endif %}
      last_rain: >
        {{ states('sensor.tempest_st_00056115_last_rain_start') }}

  - name: "[Weather] Is Lightning"
    unique_id: weather_is_lightning
    icon: mdi:weather-lightning
    delay_on: 20
    delay_off: "{{ iif(now() - states('sensor.uptime_sensor')|as_datetime < timedelta(minutes=5),0,14400) }}"
    state: >
      {%- if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and has_value('binary_sensor.weatherflow_cloud_is_lightning') %}
        {{ states('binary_sensor.weatherflow_cloud_is_lightning') }}
      {%- endif %}
    availability: "{{ has_value('binary_sensor.weatherflow_cloud_is_lightning') }}"
    attributes:
      category: weather
      provider: >
        {%- if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and has_value('binary_sensor.weatherflow_cloud_is_lightning') %}
          Weatherflow (Cloud)
        {%- endif %}
      last_lightning_strike: >
        {{ states('sensor.weatherflow_cloud_last_lightning_strike') }}

sensor:
  - name: "[Weather] Temperature Trend"
    unique_id: weather_temperature_trend
    icon: >
      {% if is_state(this.entity_id,'Rising') %} mdi:thermometer-chevron-up
      {% elif is_state(this.entity_id,'Falling') %} mdi:thermometer-chevron-down
      {% else %} mdi:thermometer
      {% endif %}
    state: >
      {% if is_state('binary_sensor.temptrend_outdoor_rising','on') %} Rising
      {% elif is_state('binary_sensor.temptrend_outdoor_falling','on') %} Falling
      {% else %} Steady
      {% endif %}
    availability: >
      {{ has_value('binary_sensor.temptrend_outdoor_rising')
          and has_value('binary_sensor.temptrend_outdoor_falling') }}

  - name: "[Weather] Current Condition"
    unique_id: weather_current_condition
    icon: mdi:weather-partly-snowy-rainy
    state: >
      {% if has_value('weather.weatherflow_forecast_brisbane_st') %}
        {% set condition = states('weather.weatherflow_forecast_brisbane_st') %}
      {% elif has_value('weather.east_tamworth') %}
        {% set condition = states('weather.east_tamworth') %}
      {% elif has_value('weather.pirateweather') %}
        {% set condition = states('weather.pirateweather') %}
      {% endif %}

      {% if condition|lower == 'clear' and is_state('sun.sun','above_horizon') %} sunny
      {% elif condition|lower == 'clear' and is_state('sun.sun','below_horizon') %} clear-night
      {% elif condition|lower in ['mainly clear','mainly sunny','clear-day'] %} sunny
      {% elif condition|lower == 'mist' %} fog
      {% elif condition|lower in ['haze','partly cloudy','partly-cloudy-day','partly-cloudy-night'] %} partlycloudy
      {% elif condition|lower == 'mostly cloudy' %} cloudy
      {% elif condition|lower in ['light rain','rain'] %} rainy
      {% elif condition|lower in ['light snow','snow'] %} snowy
      {% elif condition|lower == 'thunderstorm' %} lightning-rainy
      {% elif condition|lower == 'heavy rain' %} pouring
      {% elif condition|lower == 'precipitation' %} rainy
      {% elif condition|lower == 'wind' %} windy
      {% else %} {{ condition|lower }}
      {% endif %}
    attributes:
      provider: >
        {% if has_value('weather.tempest_daily') %} Weatherflow (Cloud)
        {% elif has_value('weather.east_tamworth') %} Bureau of Meteorology
        {% elif has_value('weather.pirateweather') %} Pirate Weather
        {% endif %}
    availability: >
      {{ has_value('weather.weatherflow_forecast_brisbane_st')
          or has_value('weather.east_tamworth')
          or has_value('weather.pirateweather') }}

  - name: "[Weather] Temperature"
    unique_id: weather_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: 째C
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_temperature')) %}
        {{ states('sensor.weatherflow_forecast_temperature')|float }}
      {% elif is_number(states('sensor.st_00056115_temperature')) %}
        {{ states('sensor.st_00056115_temperature')|float }}
      {% elif is_number(states('sensor.tamworth_airport_temp')) %}
        {{ states('sensor.tamworth_airport_temp')|float }}
      {% else %} 0
      {% endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_temperature')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.st_00056115_temperature')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.tamworth_airport_temp')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_forecast_temperature'))
          or is_number(states('sensor.st_00056115_temperature'))
          or is_number(states('sensor.tamworth_airport_temp')) }}

  - name: "[Weather] Apparent Temperature"
    unique_id: weather_apparent_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: 째C
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_feels_like_temperature')) %}
        {{ states('sensor.weatherflow_cloud_feels_like_temperature')|float }}
      {% elif is_number(states('sensor.tempest_st_00056115_feels_like_temperature')) %}
        {{ states('sensor.tempest_st_00056115_feels_like_temperature')|float }}
      {% elif is_number(states('sensor.tamworth_airport_temp_feels_like')) %}
        {{ states('sensor.tamworth_airport_temp_feels_like')|float }}
      {% else %}
        {{ states('sensor.weather_temperature')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_feels_like_temperature')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_feels_like_temperature')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.tamworth_airport_temp_feels_like')) %} Bureau of Meteorology
        {% else %} Outdoor Temp
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_feels_like_temperature'))
          or is_number(states('sensor.tempest_st_00056115_feels_like_temperature'))
          or is_number(states('sensor.tamworth_airport_temp_feels_like'))
          or is_number(states('sensor.weather_temperature')) }}

  - name: "[Weather] High Temperature"
    unique_id: weather_high_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: 째C
    state: >
      {% if state_attr('sensor.st_00056115_temperature','max_day') is defined
          and is_number(state_attr('sensor.st_00056115_temperature','max_day')) %}
        {{ state_attr('sensor.st_00056115_temperature','max_day')|float }}
      {% elif is_number(states('sensor.tamworth_airport_max_temp')) %}
        {{ states('sensor.tamworth_airport_max_temp')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if state_attr('sensor.st_00056115_temperature','max_day') is defined
            and is_number(state_attr('sensor.st_00056115_temperature','max_day')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.tamworth_airport_max_temp')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ (state_attr('sensor.st_00056115_temperature','max_day') is defined
            and is_number(state_attr('sensor.st_00056115_temperature','max_day')))
          or is_number(states('sensor.tamworth_airport_max_temp')) }}

  - name: "[Weather] Low Temperature"
    unique_id: weather_low_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: 째C
    state: >
      {% if state_attr('sensor.st_00056115_temperature','min_day') is defined
          and is_number(state_attr('sensor.st_00056115_temperature','min_day')) %}
        {{ state_attr('sensor.st_00056115_temperature','min_day')|float }}
      {% elif is_number(states('sensor.tamworth_airport_min_temp')) %}
        {{ states('sensor.tamworth_airport_min_temp')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if state_attr('sensor.st_00056115_temperature','min_day') is defined
            and is_number(state_attr('sensor.st_00056115_temperature','min_day')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.tamworth_airport_min_temp')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ (state_attr('sensor.st_00056115_temperature','min_day') is defined
            and is_number(state_attr('sensor.st_00056115_temperature','min_day')))
          or is_number(states('sensor.tamworth_airport_min_temp')) }}

  - name: "[Weather] High Temperature Differential"
    unique_id: weather_high_temperature_differential
    device_class: temperature
    state_class: measurement
    unit_of_measurement: 째C
    state: >
      {{ (states('sensor.weather_high_temperature') | float
          - state_attr('sensor.bom_average', 'maxtemp_average') | float) | round(2) }}
    attributes:
      category: weather
      today_temp: "{{states('sensor.weather_high_temperature') | float }}"
      temp_average: "{{state_attr('sensor.bom_average', 'maxtemp_average') | float }}"
      temp_hottest: "{{state_attr('sensor.bom_average', 'maxtemp_hottest') | float }}"
      temp_coldest: "{{state_attr('sensor.bom_average', 'maxtemp_coldest') | float }}"
    availability: >
      {{ is_number(states('sensor.weather_high_temperature'))
          and is_number(state_attr('sensor.bom_average', 'maxtemp_average')) }}

  - name: "[Weather] Low Temperature Differential"
    unique_id: weather_low_temperature_differential
    device_class: temperature
    state_class: measurement
    unit_of_measurement: 째C
    state: >
      {{ (states('sensor.weather_low_temperature') | float
          - state_attr('sensor.bom_average', 'mintemp_average') | float) | round(2) }}
    attributes:
      category: weather
      today_temp: "{{states('sensor.weather_low_temperature') | float }}"
      temp_average: "{{state_attr('sensor.bom_average', 'mintemp_average') | float }}"
      temp_hottest: "{{state_attr('sensor.bom_average', 'mintemp_hottest') | float }}"
      temp_coldest: "{{state_attr('sensor.bom_average', 'mintemp_coldest') | float }}"
    availability: >
      {{ is_number(states('sensor.weather_low_temperature'))
          and is_number(state_attr('sensor.bom_average', 'mintemp_average')) }}

  - name: "[Weather] Temperature Trend"
    unique_id: weather_temperature_trend
    icon: >
      {% if is_state(this.entity_id, 'rising') %} mdi:thermometer-chevron-up
      {% elif is_state(this.entity_id, 'falling') %} mdi:thermometer-chevron-down
      {% else %} mdi:thermometer
      {% endif %}
    state: >
      {% set change = states('sensor.weather_temperature_change') | float %}
      {% if change >= 0.25 %} rising
      {% elif change < -0.25 %} falling
      {% else %} steady
      {% endif %}
    availability: "{{ is_number(states('sensor.weather_temperature_change')) }}"

  - name: "[Weather] Dew Point"
    unique_id: weather_dew_point
    device_class: temperature
    state_class: measurement
    unit_of_measurement: 째C
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_dewpoint')) %}
        {{ states('sensor.weatherflow_cloud_dewpoint')|float }}
      {% elif is_number(states('sensor.tempest_st_00056115_dew_point')) %}
        {{ states('sensor.tempest_st_00056115_dew_point')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_dewpoint')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_dew_point')) %} Weatherflow (Local)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_dewpoint'))
          or is_number(states('sensor.tempest_st_00056115_dew_point')) }}

  - name: "[Weather] Humidity"
    unique_id: weather_humidity
    device_class: humidity
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_relative_humidity')) %}
        {{ states('sensor.weatherflow_cloud_relative_humidity')|int }}
      {% elif is_number(states('sensor.tempest_st_00056115_humidity')) %}
        {{ states('sensor.tempest_st_00056115_humidity')|int }}
      {% elif is_number(states('sensor.tamworth_airport_humidity')) %}
        {{ states('sensor.tamworth_airport_humidity')|int }}
      {% endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_relative_humidity')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_humidity')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.tamworth_airport_humidity')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_relative_humidity'))
          or is_number(states('sensor.tempest_st_00056115_humidity'))
          or is_number(states('sensor.tamworth_airport_humidity')) }}

  - name: "[Weather] Humidity Today"
    unique_id: weather_humidity_today
    device_class: humidity
    state_class: measurement
    unit_of_measurement: "%"
    state: "{{ states('sensor.pirateweather_humidity_0d')|int }}"
    attributes:
      provider: Pirate Weather
    availability: "{{ is_number(states('sensor.pirateweather_humidity_0d')) }}"

  - name: "[Weather] Precipitation Probability"
    unique_id: weather_precipitation_probability
    icon: mdi:weather-rainy
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {% if state_attr('weather.tempest_hourly','forecast')[0] is defined
          and is_number(state_attr('weather.tempest_hourly','forecast')[0].precipitation_probability) %}
        {{ state_attr('weather.tempest_hourly','forecast')[0].precipitation_probability|int }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_probability')) %}
        {{ states('sensor.weatherflow_cloud_precipitation_probability')|int }}
      {% elif is_number(states('sensor.tempest_st_00056115_precipitation_probability')) %}
        {{ states('sensor.tempest_st_00056115_precipitation_probability')|int }}
      {% elif is_number(states('sensor.east_tamworth_rain_chance_0')) %}
        {{ states('sensor.east_tamworth_rain_chance_0')|int }}
      {% endif %}
    attributes:
      provider: >
        {% if state_attr('weather.tempest_hourly','forecast')[0] is defined
          and is_number(state_attr('weather.tempest_hourly','forecast')[0].precipitation_probability) %} Hourly Forecast
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_probability')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_precipitation_probability')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.east_tamworth_rain_chance_0')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ state_attr('weather.tempest_hourly','forecast')[0] is defined
            and is_number(state_attr('weather.tempest_hourly','forecast')[0].precipitation_probability)
          or is_number(states('sensor.weatherflow_cloud_precipitation_probability'))
          or is_number(states('sensor.tempest_st_00056115_precipitation_probability'))
          or is_number(states('sensor.east_tamworth_rain_chance_0')) }}

  - name: "[Weather] Precipitation Probability Today"
    unique_id: weather_precipitation_probability_today
    icon: mdi:weather-rainy
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {% if state_attr('weather.tempest_daily','forecast')[0] is defined
          and is_number(state_attr('weather.tempest_daily','forecast')[0].precipitation_probability) %}
        {{ state_attr('weather.tempest_daily','forecast')[0].precipitation_probability|int }}
      {% endif %}
    attributes:
      provider: Daily Forecast
    availability: >
      {{ state_attr('weather.tempest_daily','forecast')[0] is defined
          and is_number(state_attr('weather.tempest_daily','forecast')[0].precipitation_probability) }}

  - name: "[Weather] Precipitation Rate"
    unique_id: weather_precipitation_rate
    icon: mdi:weather-pouring
    device_class: precipitation_intensity
    state_class: measurement
    unit_of_measurement: mm/h
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_local', 'on')
            and is_number(states('sensor.tempest_st_00056115_rain_rate')) %}
          {{ states('sensor.tempest_st_00056115_rain_rate') | float }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_cloud_precipitation_rate')) %}
          {{ states('sensor.weatherflow_cloud_precipitation_rate') | float }}
      {% elif is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_precip_intensity')) %}
          {{ states('sensor.pirateweather_precip_intensity') | float }}
      {% endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local', 'on')
            and is_number(states('sensor.tempest_st_00056115_rain_rate')) %}
          Weatherflow (Local)
        {% elif is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_cloud_precipitation_rate')) %}
          Weatherflow (Cloud)
        {% elif is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_precip_intensity')) %}
          Pirate Weather
        {% endif %}
    availability: >
      {{ (is_state('binary_sensor.connected_weatherflow_local', 'on')
            and is_number(states('sensor.tempest_st_00056115_rain_rate')))
          or (is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_cloud_precipitation_rate')))
          or is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_precip_intensity')) }}

  - name: "[Weather] Precipitation Intensity"
    unique_id: weather_precipitation_intensity
    icon: mdi:weather-pouring
    state: >
      {% set rate = states('sensor.weather_precipitation_rate')|int %}
      {% if rate == 0 %} none
      {% elif rate <= 1.0 %} very light
      {% elif rate <= 4 %} light
      {% elif rate <= 15 %} moderate
      {% elif rate <= 30 %} very heavy
      {% elif rate <= 50 %} heavy
      {% else %} violent
      {% endif %}
    attributes:
      category: weather
      provider: "{{ state_attr('sensor.weather_precipitation_rate', 'provider') }}"
    availability: "{{ is_number(states('sensor.weather_precipitation_rate')) }}"

  - name: "[Weather] Precipitation Duration Today"
    unique_id: weather_precipitation_duration_today
    icon: mdi:timer
    device_class: duration
    state_class: measurement
    unit_of_measurement: min
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_rain_duration_today')) %}
        {{ states('sensor.tempest_st_00056115_rain_duration_today')|float }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_duration_today')) %}
        {{ states('sensor.weatherflow_cloud_precipitation_duration_today')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tempest_st_00056115_rain_duration_today')) %} Weatherflow (Local)
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_duration_today')) %} Weatherflow (Cloud)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_rain_duration_today'))
          or is_number(states('sensor.weatherflow_cloud_precipitation_duration_today')) }}

  - name: "[Weather] Precipitation Duration Yesterday"
    unique_id: weather_precipitation_duration_yesterday
    icon: mdi:timer
    device_class: duration
    state_class: measurement
    unit_of_measurement: min
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_rain_duration_yesterday')) %}
        {{ states('sensor.tempest_st_00056115_rain_duration_yesterday')|float }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_duration_yesterday')) %}
        {{ states('sensor.weatherflow_cloud_precipitation_duration_yesterday')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tempest_st_00056115_rain_duration_yesterday')) %} Weatherflow (Local)
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_duration_yesterday')) %} Weatherflow (Cloud)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_rain_duration_yesterday'))
          or is_number(states('sensor.weatherflow_cloud_precipitation_duration_yesterday')) }}

  - name: "[Weather] Precipitation Today"
    unique_id: weather_precipitation_today
    icon: mdi:weather-pouring
    device_class: distance
    state_class: measurement
    unit_of_measurement: mm
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_rain_today')) %}
        {{ states('sensor.tempest_st_00056115_rain_today')|float }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_today')) %}
        {{ states('sensor.weatherflow_cloud_precipitation_today')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_today')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_rain_today')) %} Weatherflow (Local)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_precipitation_today'))
          or is_number(states('sensor.tempest_st_00056115_rain_today')) }}

  - name: "[Weather] Precipitation Yesterday"
    unique_id: weather_precipitation_yesterday
    icon: mdi:weather-pouring
    device_class: distance
    state_class: measurement
    unit_of_measurement: mm
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_rain_yesterday')) %}
        {{ states('sensor.tempest_st_00056115_rain_yesterday')|float }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_yesterday')) %}
        {{ states('sensor.weatherflow_cloud_precipitation_yesterday')|float }}
      {% elif is_number(states('sensor.east_tamworth_precipitation_yesterday')) %}
        {{ states('sensor.east_tamworth_precipitation_yesterday')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tempest_st_00056115_rain_yesterday')) %} Weatherflow (Local)
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_precipitation_yesterday')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.east_tamworth_precipitation_yesterday')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_rain_yesterday'))
          or is_number(states('sensor.weatherflow_cloud_precipitation_yesterday'))
          or is_number(states('sensor.east_tamworth_precipitation_yesterday')) }}

  - name: "[Weather] Precipitation Type"
    unique_id: weather_precipitation_type
    icon: mdi:weather-rainy
    device_class: enum
    state: >
      {% set freeze_alt = states('sensor.tempest_st_00056115_freezing_level_altitude')|int(-1) %}
      {% if has_value('sensor.tempest_st_00056115_precipitation_type') %}
        {% set type = states('sensor.tempest_st_00056115_precipitation_type')|lower %}
        {% if type != 'none' %} {{ type }}
        {% elif freeze_alt != -1 and freeze_alt < 200 %} snow
        {% else %} rain
        {% endif %}
      {% else %}
        {% if is_state('binary_sensor.weatherflow_cloud_is_freezing','on') %} snow
        {% else %} rain
        {% endif %}
      {% endif %}
    attributes:
      provider: >
        {% if has_value('sensor.tempest_st_00056115_precipitation_type') %} Weatherflow (Local)
        {% else %} Weatherflow (Cloud)
        {% endif %}
    availability: >
      {{ has_value('sensor.tempest_st_00056115_precipitation_type')
          or states('binary_sensor.weatherflow_cloud_is_freezing') in ['off','on'] }}

  - name: "[Weather] Lightning Count"
    unique_id: weather_lightning_count
    icon: mdi:lightning-bolt
    state_class: measurement
    unit_of_measurement: strikes
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_lightning_strike_count')) %}
        {{ states('sensor.weatherflow_cloud_lightning_strike_count')|int }}
      {% elif is_number(states('sensor.tempest_st_00056115_lightning_count')) %}
        {{ states('sensor.tempest_st_00056115_lightning_count')|int }}
      {% endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_lightning_strike_count')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_lightning_count')) %} Weatherflow (Local)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_lightning_strike_count'))
          or is_number(states('sensor.tempest_st_00056115_lightning_count')) }}

  - name: "[Weather] Barometric Pressure"
    unique_id: weather_barometric_pressure
    device_class: pressure
    state_class: measurement
    unit_of_measurement: hPa
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_barometric_pressure')) %}
        {{ states('sensor.weatherflow_cloud_barometric_pressure')|float }}
      {% elif is_number(states('sensor.tempest_st_00056115_sea_level_pressure')) %}
        {{ states('sensor.tempest_st_00056115_sea_level_pressure')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_barometric_pressure')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_sea_level_pressure')) %} Weatherflow (Local)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_barometric_pressure'))
          or is_number(states('sensor.tempest_st_00056115_sea_level_pressure')) }}

  - name: "[Weather] Wind Speed"
    unique_id: weather_wind_speed
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if is_number(states('sensor.tamworth_airport_wind_speed_kilometre')) %}
        {{ states('sensor.tamworth_airport_wind_speed_kilometre')|float }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_speed_km_h')) %}
        {{ states('sensor.weatherflow_cloud_wind_speed_km_h')|float }}
      {% elif is_number(states('sensor.tempest_st_00056115_wind_speed')) %}
        {{ states('sensor.tempest_st_00056115_wind_speed')|float * 3.6 }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tamworth_airport_wind_speed_kilometre')) %} Bureau of Meteorology
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_speed_km_h')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_wind_speed')) %} Weatherflow (Local)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_wind_speed_km_h'))
          or is_number(states('sensor.tempest_st_00056115_wind_speed'))
          or is_number(states('sensor.tamworth_airport_wind_speed_kilometre')) }}

  - name: "[Weather] Wind Speed Today"
    unique_id: weather_wind_speed_today
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if state_attr('weather.tempest_daily','forecast')[0] is defined
          and is_number(state_attr('weather.tempest_daily','forecast')[0].wind_speed) %}
        {{ state_attr('weather.tempest_daily','forecast')[0].wind_speed|int }}
      {% endif %}
    attributes:
      provider: Daily Forecast
    availability: >
      {{ state_attr('weather.tempest_daily','forecast')[0] is defined
          and is_number(state_attr('weather.tempest_daily','forecast')[0].wind_speed) }}

  - name: "[Weather] Wind Gust"
    unique_id: weather_wind_gust
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if is_number(states('sensor.tamworth_airport_gust_speed_kilometre')) %}
        {{ states('sensor.tamworth_airport_gust_speed_kilometre')|float }}
      {% elif is_number(states('sensor.tempest_st_00056115_wind_gust')) %}
        {{ states('sensor.tempest_st_00056115_wind_gust')|float * 3.6 }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_gust_km_h')) %}
        {{ states('sensor.weatherflow_cloud_wind_gust_km_h')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tamworth_airport_gust_speed_kilometre')) %} Bureau of Meteorology
        {% elif is_number(states('sensor.tempest_st_00056115_wind_gust')) %} Weatherflow (Local)
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_gust_km_h')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tamworth_airport_gust_speed_kilometre')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_wind_gust'))
          or is_number(states('sensor.weatherflow_cloud_wind_gust_km_h'))
          or is_number(states('sensor.tamworth_airport_gust_speed_kilometre')) }}

  - name: "[Weather] Wind Gust Today"
    unique_id: weather_wind_gust_today
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: "{{ states('sensor.pirateweather_wind_gust_0d')|int(none) }}"
    attributes:
      provider: Pirate Weather
    availability: "{{ is_number(states('sensor.pirateweather_wind_gust_0d')) }}"

  - name: "[Weather] Wind Lull"
    unique_id: weather_wind_lull
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_wind_lull')) %}
        {{ states('sensor.tempest_st_00056115_wind_lull')|float * 3.6 }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_lull_km_h')) %}
        {{ states('sensor.weatherflow_cloud_wind_lull_km_h')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tempest_st_00056115_wind_lull')) %} Weatherflow (Local)
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_lull_km_h')) %} Weatherflow (Cloud)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_wind_lull'))
          or is_number(states('sensor.weatherflow_cloud_wind_lull_km_h')) }}

  - name: "[Weather] Wind Bearing"
    unique_id: weather_wind_bearing
    state_class: measurement
    unit_of_measurement: 째
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_wind_bearing')) %}
        {{ states('sensor.tempest_st_00056115_wind_bearing')|float }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_direction')) %}
        {{ states('sensor.weatherflow_cloud_wind_direction')|float }}
      {% elif is_number(states('sensor.tamworth_airport_wind_direction')) %}
        {{ states('sensor.tamworth_airport_wind_direction') }}
      {% endif %}
    attributes:
      cardinal: >
        {% set directions = ['N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW','N'] %}
        {{ directions[((states('sensor.weather_wind_bearing')|float(-1)/360)|float*16)|round] }}
      full_cardinal: >
        {% set directions = ['North','North-Northeast','Northeast','East-Northeast','East','East-Southeast',
            'Southeast','South-Southeast','South','South-Southwest','Southwest','West-Southwest','West',
            'West-Northwest','Northwest','North-Northwest','North'] %}
        {{ directions[((states('sensor.weather_wind_bearing')|float(-1)/360)|float*16)|round] }}
      provider: >
        {% if is_number(states('sensor.tempest_st_00056115_wind_bearing')) %} Weatherflow (Local)
        {% elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_wind_direction')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tamworth_airport_wind_direction')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_wind_bearing'))
          or is_number(states('sensor.weatherflow_cloud_wind_direction'))
          or is_number(states('sensor.tamworth_airport_wind_direction')) }}

  - name: "[Weather] Wind Beaufort Display"
    unique_id: weather_wind_beaufort_display
    icon: mdi:windsock
    state: "{{ states('sensor.weatherflow_cloud_beaufort_description')|replace('_',' ')|title }}"
    attributes:
      provider: Weatherflow (Cloud)
    availability: "{{ has_value('sensor.weatherflow_cloud_beaufort_description') }}"

  - name: "[Weather] Visibility"
    unique_id: weather_visibility
    icon: mdi:eye
    device_class: distance
    state_class: measurement
    unit_of_measurement: km
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_visibility')) %}
        {{ states('sensor.tempest_st_00056115_visibility')|float }}
      {% elif is_number(states('sensor.weatherflow_cloud_visibility')) %}
        {{ states('sensor.weatherflow_cloud_visibility')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tempest_st_00056115_visibility')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.weatherflow_cloud_visibility')) %} Weatherflow (Cloud)
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_visibility'))
          or is_number(states('sensor.weatherflow_cloud_visibility')) }}

  - name: "[Weather] Nearest Storm Bearing"
    unique_id: weather_nearest_storm_bearing
    state: "{{ states('sensor.pirateweather_nearest_storm_bearing')|float(none) }}"
    state_class: measurement
    unit_of_measurement: "째"
    attributes:
      provider: Pirate Weather
    availability: "{{ is_number(states('sensor.pirateweather_nearest_storm_bearing')) }}"

  - name: "[Weather] Nearest Storm Distance"
    unique_id: weather_nearest_storm_distance
    device_class: distance
    state_class: measurement
    unit_of_measurement: km
    state: "{{ states('sensor.pirateweather_nearest_storm_distance')|int(none) }}"
    attributes:
      provider: Pirate Weather
    availability: "{{ is_number(states('sensor.pirateweather_nearest_storm_distance')) }}"

  - name: "[Weather] Storm Full Direction"
    unique_id: weather_storm_full_direction
    state: >
      {% set directions = ['North','North-Northeast','Northeast','East-Northeast','East','East-Southeast',
          'Southeast','South-Southeast','South','South-Southwest','Southwest','West-Southwest','West',
          'West-Northwest','Northwest','North-Northwest','North'] %}
      {% set dir = states('sensor.weather_nearest_storm_bearing') %}
      {{ iif(is_number(dir),directions[((dir|float(-1)/360)|float*16)|round],'unknown') }}
    attributes:
      provider: "{{ state_attr('sensor.weather_nearest_storm_bearing','provider') }}"
    availability: "{{ is_number(states('sensor.weather_nearest_storm_bearing')) }}"

  - name: "[Weather] Cloud Cover"
    unique_id: weather_cloud_cover
    icon: mdi:cloud
    state_class: measurement
    unit_of_measurement: "%"
    state: "{{ states('sensor.pirateweather_cloud_coverage')|int(none) }}"
    attributes:
      provider: Pirate Weather
    availability: "{{ is_number(states('sensor.pirateweather_cloud_coverage')) }}"

  - name: "[Weather] Cloud Cover Today"
    unique_id: weather_cloud_cover_today
    icon: mdi:cloud
    state_class: measurement
    unit_of_measurement: "%"
    state: "{{ states('sensor.pirateweather_cloud_coverage_0d')|int(none) }}"
    attributes:
      provider: Pirate Weather
    availability: "{{ is_number(states('sensor.pirateweather_cloud_coverage_0d')) }}"

  - name: "[Weather] Illuminance"
    unique_id: weather_illuminance
    icon: mdi:brightness-7
    device_class: illuminance
    state_class: measurement
    unit_of_measurement: lx
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_brightness')) %}
        {{ states('sensor.weatherflow_cloud_brightness')|float }}
      {% elif is_number(states('sensor.tempest_st_00056115_illuminance')) %}
        {{ states('sensor.tempest_st_00056115_illuminance')|float }}
      {% endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_cloud_visibility')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.tempest_st_00056115_illuminance')) %} Weatherflow
        {% endif %}
    availability: >
      {{ is_number(states('sensor.weatherflow_cloud_brightness'))
          or is_number(states('sensor.tempest_st_00056115_illuminance')) }}

  - name: "[Weather] Future Temperature - Above 25"
    unique_id: weather_future_temperature_above_25
    icon: mdi:weather-rainy
    state: >
      {%- set ns = namespace(high_temp = 25, cnt = 0) %}
      {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
      {%- for forecast in state_attr('weather.weather_home_hourly','forecast') %}
          {%- if forecast.temperature > ns.high_temp %}
            {%- set ns.cnt = ns.cnt + 1 %}
          {%- endif %}
      {%- endfor %}
      {{ ns.cnt }}
    unit_of_measurement: Intervals
    attributes:
      category: weather
      availability: >
        {{ state_attr('weather.weather_home_hourly','forecast')[0] is defined }}
      provider: >
        {{ state_attr('weather.weather_home_hourly', 'attribution') }}
      intervals: >
        {%- set ns = namespace(high_temp = 25, list = []) %}
        {%- set current = [] %}
        {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
        {%- for forecast in state_attr('weather.weather_home_hourly','forecast') %}
        {%- if forecast.temperature > ns.high_temp %}
          {%- set new = [{
          "date": as_timestamp(forecast.datetime) | timestamp_custom('%A %b %-d'),
          "time": as_timestamp(forecast.datetime) | timestamp_custom('%H:00'),
          "temperature": forecast.temperature|round(0)}] %}
        {%- set ns.list = ns.list + new %}
        {%- endif %}
        {%- endfor %}
        {{ ns.list }}

  - name: "[Weather] Future Temperature - Above 30"
    unique_id: weather_future_temperature_above_30
    icon: mdi:weather-rainy
    state: >
      {%- set ns = namespace(high_temp = 30, cnt = 0) %}
      {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
      {%- for forecast in state_attr('weather.weather_home_hourly','forecast') %}
          {%- if forecast.temperature > ns.high_temp %}
            {%- set ns.cnt = ns.cnt + 1 %}
          {%- endif %}
      {%- endfor %}
      {{ ns.cnt }}
    unit_of_measurement: Intervals
    attributes:
      category: weather
      availability: >
        {{ state_attr('weather.weather_home_hourly','forecast')[0] is defined }}
      provider: >
        {{ state_attr('weather.weather_home_hourly', 'attribution') }}
      intervals: >
        {%- set ns = namespace(high_temp = 30, list = []) %}
        {%- set current = [] %}
        {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
        {%- for forecast in state_attr('weather.weather_home_hourly','forecast') %}
        {%- if forecast.temperature > ns.high_temp %}
          {%- set new = [{
          "date": as_timestamp(forecast.datetime) | timestamp_custom('%A %b %-d'),
          "time": as_timestamp(forecast.datetime) | timestamp_custom('%H:00'),
          "temperature": forecast.temperature|round(0)}] %}
        {%- set ns.list = ns.list + new %}
        {%- endif %}
        {%- endfor %}
        {{ ns.list }}

  - name: "[Weather] Future Temperature - Below 10"
    unique_id: weather_future_temperature_below_10
    icon: mdi:weather-rainy
    state: >
      {%- set ns = namespace(high_temp = 10, cnt = 0) %}
      {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
      {%- for forecast in state_attr('weather.weather_home_hourly','forecast') %}
          {%- if forecast.temperature < ns.high_temp %}
            {%- set ns.cnt = ns.cnt + 1 %}
          {%- endif %}
      {%- endfor %}
      {{ ns.cnt }}
    unit_of_measurement: Intervals
    attributes:
      category: weather
      availability: >
        {{ state_attr('weather.weather_home_hourly','forecast')[0] is defined }}
      provider: >
        {{ state_attr('weather.weather_home_hourly', 'attribution') }}
      intervals: >
        {%- set ns = namespace(high_temp = 10, list = []) %}
        {%- set current = [] %}
        {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
        {%- for forecast in state_attr('weather.weather_home_hourly','forecast') %}
        {%- if forecast.temperature < ns.high_temp %}
          {%- set new = [{
          "date": as_timestamp(forecast.datetime) | timestamp_custom('%A %b %-d'),
          "time": as_timestamp(forecast.datetime) | timestamp_custom('%H:00'),
          "temperature": forecast.temperature|round(0)}] %}
        {%- set ns.list = ns.list + new %}
        {%- endif %}
        {%- endfor %}
        {{ ns.list }}

  - name: "[Weather] Fog Probability Today"
    unique_id: weather_fog_probability_today
    icon: mdi:weather-fog
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {{ states('sensor.tempest_st_00056115_fog_probability') }}
    attributes:
      category: weather
      provider: Weatherflow (Local)
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_fog_probability')) }}

  - name: "[Weather] UV Index"
    unique_id: weather_uv_index
    icon: mdi:weather-sunny-alert\
    state_class: measurement
    unit_of_measurement: UV index
    state: >
      {% if is_number(states('sensor.tempest_st_00056115_uv_index')) %}
        {{ states('sensor.tempest_st_00056115_uv_index')|float }}
      {% elif is_number(states('sensor.weatherflow_cloud_uv_index')) %}
        {{ states('sensor.weatherflow_cloud_uv_index')|float }}
      {% elif is_number(states('sensor.current_uv_index')) %}
        {{ states('sensor.current_uv_index')|float }}
      {% elif is_number(states('sensor.pirateweather_uv_index')) %}
        {{ states('sensor.pirateweather_uv_index')|float }}
      {% endif %}
    attributes:
      provider: >
        {% if is_number(states('sensor.tempest_st_00056115_uv_index')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.weatherflow_cloud_uv_inde')) %} Weatherflow (Cloud)
        {% elif is_number(states('sensor.current_uv_index')) %} OpenUV
        {% elif is_number(states('sensor.pirateweather_uv_index')) %} Pirate Weather
        {% endif %}
    availability: >
      {{ is_number(states('sensor.tempest_st_00056115_uv_index'))
          or is_number(states('sensor.weatherflow_cloud_uv_index'))
          or is_number(states('sensor.pirateweather_uv_index'))
          or is_number(states('sensor.current_uv_index')) }}
